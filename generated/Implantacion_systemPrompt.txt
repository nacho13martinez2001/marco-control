# Implantaci√≥n del `systemPrompt` en la Aplicaci√≥n de Control Permanente

## üîß Objetivo
Integrar un contexto global persistente en la comunicaci√≥n entre el chat del frontend y la API de OpenAI, para que la IA responda siempre con conocimiento de los m√≥dulos presupuestarios activos y sus flujos espec√≠ficos.

---

## üîπ Paso 1: Definici√≥n modular del `systemPrompt`

Se ha creado el archivo `contexto_chat_sistema.js` con el siguiente contenido:

```js
window.systemPrompt = `
Eres un asistente especializado en fiscalizaci√≥n presupuestaria dentro de una aplicaci√≥n modular de control permanente.
Tienes acceso a los siguientes m√≥dulos:

1Ô∏è‚É£ Aprobaci√≥n Presupuestaria  
   - Procesa datos de la hoja 'Aprobaci√≥n Presupuesto'.
   - Si la plantilla contiene 'INFORME DE INTERVENCI√ìN SOBRE LA APROBACI√ìN DEL PRESUPUESTO GENERAL', activa el an√°lisis inicial.

2Ô∏è‚É£ Estabilidad Presupuestaria  
   - Usa hojas 'Resumen Cap√≠tulos' y 'Estabilidad'.
   - C√°lculo base: Cap. 1-7 DRNs ‚Äì Cap. 1-7 ORNs ‚Üí Capacidad o Necesidad de Financiaci√≥n.

3Ô∏è‚É£ Modificaciones Presupuestarias  
   - Plantilla: 'Informe de Estabilidad en Modificaciones'.
   - Puede activar proyecciones a fin de ejercicio si se carga la hoja 'EE'.

4Ô∏è‚É£ Funciones Contables (ICAL 2013)  
   - Aplica criterios de contabilidad p√∫blica para devoluciones, anticipos, reintegros.

‚ÑπÔ∏è No act√∫es por tu cuenta. Espera siempre instrucciones del usuario o de los datos cargados.
`;
```

Este script se carga en `formulario_drive.html` **antes de `chat.js`** para asegurar su disponibilidad global.

---

## üîπ Paso 2: Modificaci√≥n del `chat.js`

En `chat.js`, se inyecta el prompt en cada petici√≥n `fetch` a `/chat`:

```js
fetch("/chat", {
  method: "POST",
  headers: { "Content-Type": "application/json" },
  body: JSON.stringify({
    messages: [
      { role: "system", content: window.systemPrompt },
      { role: "user", content: texto }
    ],
    textoEditor: textoEditor
  })
})
```

Con esto, cada mensaje de usuario se acompa√±a del contexto global definido.

---

## üîπ Paso 3: Adaptaci√≥n de la ruta `/chat` en `app_drive.py`

El backend recoge los `messages[]` y realiza la llamada a GPT-4:

```python
messages = data.get("messages", [])
texto_editor = data.get("textoEditor", "")
...
respuesta = openai.ChatCompletion.create(
    model="gpt-4-turbo",
    messages=messages,
    max_tokens=800,
    temperature=0.7
)
```

Esto mantiene la compatibilidad con flujos especiales como proyecciones de estabilidad, pero da prioridad al prompt si no hay coincidencias con patrones.

---

## üìä Resultado

La IA responde ahora con pleno conocimiento de:
- Los m√≥dulos presupuestarios activos.
- Las hojas clave y plantillas esperadas.
- Las reglas de activaci√≥n de flujos.

üåü Confirmado mediante pruebas reales en el chat integrado.

---

## üìÑ Archivos implicados
- `/static/js/contexto_chat_sistema.js`
- `/static/js/chat.js`
- `formulario_drive.html`
- `app_drive.py` (ruta `/chat`)

---

## üìÖ Fecha de implantaci√≥n: Mayo 2025

**Responsable:** Paco (Interventor Tesorero de Administraci√≥n Local)

**Estado:** ‚úÖ Operativo y validado
